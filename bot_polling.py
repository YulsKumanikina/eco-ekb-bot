# =========================================================================
# ===    BOT_POLLING.PY (–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø 2.0 - –°–¢–ê–ë–ò–õ–¨–ù–ê–Ø)           ===
# =========================================================================

import telebot
from telebot import types 
import pandas as pd
import json
import re
from typing import List, Tuple
from gigachat.client import GigaChatSyncClient
from gigachat.models import Chat, Messages, MessagesRole
import random
from datetime import datetime, date, timedelta
import logging
from collections import deque
from thefuzz import process
import os

import db_manager as db
import challenges_data as challenges
from apscheduler.schedulers.background import BackgroundScheduler



BASE_DIR = os.path.dirname(os.path.abspath(__file__))

# --- –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ---
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[logging.StreamHandler()]
)

# --- –ì–õ–û–ë–ê–õ–¨–ù–´–ï –ù–ê–°–¢–†–û–ô–ö–ò ---
user_context = {}
MAX_HISTORY_LENGTH = 5

# ### –ù–ê–°–¢–†–û–ô–ö–ò –ì–ï–ô–ú–ò–§–ò–ö–ê–¶–ò–ò ###
POINTS_FOR_RECYCLE = 10; POINTS_FOR_STREAK = 50; POINTS_FOR_CHALLENGE = 75;
POINTS_FOR_QUIZ = 5; POINTS_FOR_TIP = 1; POINTS_FOR_INVITE = 30; POINTS_FOR_ACHIEVEMENT = 20;

LEVELS = {
    1: {"name": "–ù–æ–≤–∏—á–æ–∫", "min_points": 0}, 2: {"name": "–û—Å–æ–∑–Ω–∞–Ω–Ω—ã–π –∂–∏—Ç–µ–ª—å", "min_points": 100},
    3: {"name": "–≠–∫–æ-–∞–∫—Ç–∏–≤–∏—Å—Ç", "min_points": 250}, 4: {"name": "–°—Ç—Ä–∞–∂ –ü—Ä–∏—Ä–æ–¥—ã", "min_points": 500},
    5: {"name": "–≠–∫–æ-–í–æ–∏–Ω", "min_points": 1000},
}
ACHIEVEMENTS = {
    'first_steps': '–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏', 'recycler_adept': '–°–æ—Ä—Ç–∏—Ä–æ–≤—â–∏–∫-–ª—é–±–∏—Ç–µ–ª—å',
    'paper_master': '–ú–∞–≥–∏—Å—Ç—Ä –º–∞–∫—É–ª–∞—Ç—É—Ä—ã', 'plastic_lord': '–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –ø–ª–∞—Å—Ç–∏–∫–∞',
    'eco_erudite': '–≠–∫–æ-–≠—Ä—É–¥–∏—Ç', 'marathoner': '–ú–∞—Ä–∞—Ñ–æ–Ω–µ—Ü',
    'mentor': '–ù–∞—Å—Ç–∞–≤–Ω–∏–∫', 'perfectionist': '–ü–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏—Å—Ç',
}
BTN_RECYCLED = '—è —Å–¥–∞–ª –≤—Ç–æ—Ä—Å—ã—Ä—å–µ! ‚úÖ'; BTN_FIND_POINT = '–Ω–∞–π—Ç–∏ –ø—É–Ω–∫—Ç ‚ôªÔ∏è'; BTN_PROFILE = '–º–æ–π –ø—Ä–æ—Ñ–∏–ª—å üë§';
BTN_QUIZ = '—ç–∫–æ-–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ üß†'; BTN_CHALLENGE = '—ç–∫–æ-—á–µ–ª–ª–µ–Ω–¥–∂ üí™'; BTN_LEADERBOARD = '–ª–∏–¥–µ—Ä—ã üèÜ';
BTN_TIP = '—Å–æ–≤–µ—Ç –¥–Ω—è üí°'; BTN_INVITE = '–ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ ü§ù'; BTN_QUESTION = '–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å üß†';

# ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
STOP_WORDS = set(['–∏', '–≤', '–≤–æ', '–Ω–µ', '—á—Ç–æ', '–æ–Ω', '–Ω–∞', '—è', '—Å', '—Å–æ', '–∫–∞–∫', '–∞', '—Ç–æ', '–≤—Å–µ', '–æ–Ω–∞', '—Ç–∞–∫', '–µ–≥–æ', '–Ω–æ', '–¥–∞', '—Ç—ã', '–∫', '—É', '–∂–µ', '–≤—ã', '–∑–∞', '–±—ã', '–ø–æ', '—Ç–æ–ª—å–∫–æ', '–µ–µ', '–º–Ω–µ', '–±—ã–ª–æ', '–≤–æ—Ç', '–æ—Ç', '–º–µ–Ω—è', '–µ—â–µ', '–Ω–µ—Ç', '–æ', '–∏–∑', '–µ–º—É', '—Ç–µ–ø–µ—Ä—å', '–∫–æ–≥–¥–∞', '–¥–∞–∂–µ', '–Ω—É', '–≤–¥—Ä—É–≥', '–ª–∏', '–µ—Å–ª–∏', '—É–∂–µ', '–∏–ª–∏', '–Ω–∏', '–±—ã—Ç—å', '–±—ã–ª', '–Ω–µ–≥–æ', '–¥–æ', '–≤–∞—Å', '–Ω–∏–±—É–¥—å', '–æ–ø—è—Ç—å', '—É–∂', '–≤–∞–º', '–≤–µ–¥—å', '—Ç–∞–º', '–ø–æ—Ç–æ–º', '—Å–µ–±—è', '–Ω–∏—á–µ–≥–æ', '–µ–π', '–º–æ–∂–µ—Ç', '–æ–Ω–∏', '—Ç—É—Ç', '–≥–¥–µ', '–µ—Å—Ç—å', '–Ω–∞–¥–æ', '–Ω–µ–π', '–¥–ª—è', '–º—ã', '—Ç–µ–±—è', '–∏—Ö', '—á–µ–º', '–±—ã–ª–∞', '—Å–∞–º', '—á—Ç–æ–±', '–±–µ–∑', '–±—É–¥—Ç–æ', '—á–µ–≥–æ', '—Ä–∞–∑', '—Ç–æ–∂–µ', '—Å–µ–±–µ', '–ø–æ–¥', '–±—É–¥–µ—Ç', '–∂', '—Ç–æ–≥–¥–∞', '–∫—Ç–æ', '—ç—Ç–æ—Ç', '—Ç–æ–≥–æ', '–ø–æ—Ç–æ–º—É', '—ç—Ç–æ–≥–æ', '–∫–∞–∫–æ–π', '—Å–æ–≤—Å–µ–º', '–Ω–∏–º', '–∑–¥–µ—Å—å', '—ç—Ç–æ–º', '–æ–¥–∏–Ω', '–ø–æ—á—Ç–∏', '–º–æ–π', '—Ç–µ–º', '—á—Ç–æ–±—ã', '–Ω–µ–µ', '—Å–µ–π—á–∞—Å', '–±—ã–ª–∏', '–∫—É–¥–∞', '–∑–∞—á–µ–º', '–≤—Å–µ—Ö', '–Ω–∏–∫–æ–≥–¥–∞', '–º–æ–∂–Ω–æ', '–ø—Ä–∏', '–Ω–∞–∫–æ–Ω–µ—Ü', '–¥–≤–∞', '–æ–±', '–¥—Ä—É–≥–æ–π', '—Ö–æ—Ç—å', '–ø–æ—Å–ª–µ', '–Ω–∞–¥', '–±–æ–ª—å—à–µ', '—Ç–æ—Ç', '—á–µ—Ä–µ–∑', '—ç—Ç–∏', '–Ω–∞—Å', '–ø—Ä–æ', '–≤—Å–µ–≥–æ', '–Ω–∏—Ö', '–∫–∞–∫–∞—è', '–º–Ω–æ–≥–æ', '—Ä–∞–∑–≤–µ', '—Ç—Ä–∏', '—ç—Ç—É', '–º–æ—è', '–≤–ø—Ä–æ—á–µ–º', '—Ö–æ—Ä–æ—à–æ', '—Å–≤–æ—é', '—ç—Ç–æ–π', '–ø–µ—Ä–µ–¥', '–∏–Ω–æ–≥–¥–∞', '–ª—É—á—à–µ', '—á—É—Ç—å', '—Ç–æ–º', '–Ω–µ–ª—å–∑—è', '—Ç–∞–∫–æ–π', '–∏–º', '–±–æ–ª–µ–µ', '–≤—Å–µ–≥–¥–∞', '–∫–æ–Ω–µ—á–Ω–æ', '–≤—Å—é', '–º–µ–∂–¥—É', '—Ç–∞–∫–æ–µ', '—ç—Ç–æ'])
SEARCH_TRIGGERS = ['–∫—É–¥–∞ —Å–¥–∞—Ç—å', '–≥–¥–µ –ø—Ä–∏–Ω–∏–º–∞—é—Ç', '–ø—É–Ω–∫—Ç—ã –ø—Ä–∏–µ–º–∞', '–ø—É–Ω–∫—Ç—ã –ø—Ä–∏—ë–º–∞', '–∞–¥—Ä–µ—Å–∞', '–∞–¥—Ä–µ—Å', '–Ω–∞–π–¥–∏', '–Ω–∞–π—Ç–∏', '–≥–¥–µ', '–∫—É–¥–∞']
JUNK_WORDS = ['–∞', '–≤', '–∏', '—Å', '–∫', '–ø–æ']
VAGUE_REPLIES = {'–¥–∞', '–Ω–µ—Ç', '–æ–∫', '—Ö–æ—Ä–æ—à–æ', '–ø—Ä–∏–≤–µ—Ç', '—Å–ø–∞—Å–∏–±–æ', '–ø–æ–Ω—è—Ç–Ω–æ', '—ç–∫–æ–ª–æ–≥–∏—è', '–ø—É–Ω–∫—Ç—ã —Å–¥–∞—á–∏'}

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
try:
    from config import (TELEGRAM_TOKEN, GIGACHAT_API_KEY, KNOLEDGE_BASE_PATH, 
                        RECYCLING_POINTS_PATH, INTERESTING_FACTS_PATH, 
                        ECO_TIPS_PATH, FALLBACK_POINTS)
except ImportError:
    logging.critical("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª config.py.")
    exit()

MAX_POINTS_TO_SHOW = 3

# --- –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ---
bot = telebot.TeleBot(TELEGRAM_TOKEN)
bot.current_polls = {}
try:
    giga = GigaChatSyncClient(credentials=GIGACHAT_API_KEY, scope='GIGACHAT_API_B2B', verify_ssl_certs=False)
    logging.info("GigaChat —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
except Exception as e: 
    logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å GigaChat: {e}")
    giga = None

db.init_db()

def load_data():
    points, knowledge, facts, tips = pd.DataFrame(), [], [], []
    try: 
        column_names = ['name', 'city', 'address', 'accepts', 'work_hours', 'phone_number', 'website']
        points = pd.read_csv(RECYCLING_POINTS_PATH, header=0, names=column_names)
        points = points.fillna('') 
        logging.info("‚úÖ recycling_points.csv –∑–∞–≥—Ä—É–∂–µ–Ω.")
    except Exception as e: logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ recycling_points.csv: {e}")
    try:
        with open(KNOLEDGE_BASE_PATH, 'r', encoding='utf-8') as f: knowledge = json.load(f)
        logging.info("‚úÖ knowledge_base.json –∑–∞–≥—Ä—É–∂–µ–Ω.")
    except Exception as e: logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ knowledge_base.json: {e}")
    try:
        with open(INTERESTING_FACTS_PATH, 'r', encoding='utf-8') as f: facts = json.load(f)
        logging.info("‚úÖ interesting_facts.json –∑–∞–≥—Ä—É–∂–µ–Ω.")
    except Exception as e: logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ interesting_facts.json: {e}")
    try:
        with open(ECO_TIPS_PATH, 'r', encoding='utf-8') as f: tips = json.load(f)
        logging.info("‚úÖ eco_tips.json –∑–∞–≥—Ä—É–∂–µ–Ω.")
    except Exception as e: logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ eco_tips.json: {e}")
    return points, knowledge, facts, tips


# --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ---
def escape_markdown(text: str) -> str:
    return re.sub(f'([{re.escape(r"_*[]()~`>#+-=|{}.!")}])', r'\\\1', text)

def send_message_safely(message, text_to_send, **kwargs):
    """
    –ü—ã—Ç–∞–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å MarkdownV2. 
    –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–∞—Ä—Å–∏–Ω–≥–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç.
    –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–æ–±–∞–≤–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É.
    """
    # –ï—Å–ª–∏ –≤ kwargs —è–≤–Ω–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω–∞ –¥—Ä—É–≥–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–∏–ª–∏ –µ–µ —É–¥–∞–ª–µ–Ω–∏–µ),
    # —Ç–æ –º—ã –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞—à—É –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.
    if 'reply_markup' not in kwargs:
        kwargs['reply_markup'] = create_main_keyboard()

    try:
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º parse_mode –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –æ–Ω –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω
        if 'parse_mode' not in kwargs:
            kwargs['parse_mode'] = 'MarkdownV2'
        bot.reply_to(message, text_to_send, **kwargs)

    except telebot.apihelper.ApiTelegramException as e:
        if "can't parse entities" in str(e):
            logging.warning(f"MarkdownV2 parsing failed for chat {message.chat.id}. Sending as plain text.")
            kwargs.pop('parse_mode', None)
            bot.reply_to(message, text_to_send, **kwargs)
        else:
            logging.error(f"Failed to send message to {message.chat.id}: {e}")

def create_main_keyboard():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
    markup.add(types.KeyboardButton(BTN_RECYCLED), types.KeyboardButton(BTN_FIND_POINT))
    markup.add(types.KeyboardButton(BTN_PROFILE), types.KeyboardButton(BTN_QUIZ))
    markup.add(types.KeyboardButton(BTN_CHALLENGE), types.KeyboardButton(BTN_LEADERBOARD))
    markup.add(types.KeyboardButton(BTN_TIP), types.KeyboardButton(BTN_INVITE))
    markup.add(types.KeyboardButton(BTN_QUESTION))
    return markup
    
# --- –§–£–ù–ö–¶–ò–ò –ì–ï–ô–ú–ò–§–ò–ö–ê–¶–ò–ò ---
def add_points_and_notify(user_id: int, points: int, reason_message: str, check_referral=False):
    profile_before = db.get_or_create_user_profile(user_id)
    db.add_points(user_id, points)
    
    notification_text = f"{escape_markdown(reason_message)}\n\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ *{points} –≠–∫–æ-–û—á–∫–æ–≤*\\!"
    try:
        bot.send_message(user_id, notification_text, parse_mode='MarkdownV2')
    except telebot.apihelper.ApiTelegramException as e:
        if "can't parse entities" in str(e):
            logging.warning(f"MarkdownV2 parsing failed for notification to {user_id}. Sending as plain text.")
            bot.send_message(user_id, notification_text.replace("*", "").replace("\\", ""))
        else:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–∏ –æ—á–∫–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

    profile_after = db.get_or_create_user_profile(user_id)
    check_for_level_up(user_id, profile_after['total_points'], profile_after['level'])
    check_for_achievements(user_id)

    if check_referral:
        check_referral_bonus(user_id, profile_before, profile_after)

def check_referral_bonus(user_id, profile_before, profile_after):
    referrer_id = profile_after.get('referred_by')
    bonus_was_given = profile_after.get('referrer_bonus_given', 0) == 1

    if referrer_id and not bonus_was_given and profile_before['total_points'] < 50 and profile_after['total_points'] >= 50:
        logging.info(f"User {user_id} crossed 50 points. Awarding bonus to referrer {referrer_id}.")
        user_name = "–í–∞—à –¥—Ä—É–≥"
        try:
            user_info = bot.get_chat(user_id)
            user_name = user_info.first_name or user_info.username
        except Exception as e:
            logging.error(f"Could not get user info for {user_id}: {e}")
        
        add_points_and_notify(referrer_id, POINTS_FOR_INVITE, f"–í–∞—à –¥—Ä—É–≥ {user_name} –Ω–∞–±—Ä–∞–ª –ø–µ—Ä–≤—ã–µ 50 –æ—á–∫–æ–≤!", check_referral=False)
        
        referrer_profile = db.get_or_create_user_profile(referrer_id)
        new_referrals_count = referrer_profile.get('referrals_count', 0) + 1
        db.update_profile_stats(referrer_id, {'referrals_count': new_referrals_count})
        db.update_profile_stats(user_id, {'referrer_bonus_given': 1})

def check_for_level_up(user_id, user_points, user_level):
    new_level_num = user_level
    for level_num, level_info in sorted(LEVELS.items(), reverse=True):
        if user_points >= level_info["min_points"]:
            new_level_num = level_num
            break
    
    if new_level_num > user_level:
        db.update_profile_stats(user_id, {'level': new_level_num})
        level_name = LEVELS[new_level_num]["name"]
        bot.send_message(user_id, f"üéâ *–ù–û–í–´–ô –£–†–û–í–ï–ù–¨* üéâ\n\n–í—ã —Å—Ç–∞–ª–∏ *{escape_markdown(level_name)}*\\! –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å\\!", parse_mode='MarkdownV2')

def check_for_achievements(user_id):
    profile = db.get_or_create_user_profile(user_id)
    user_achievements = db.get_user_achievements(user_id)
    def grant_if_new(ach_id):
        if ach_id not in user_achievements:
            db.grant_achievement(user_id, ach_id)
            add_points_and_notify(user_id, POINTS_FOR_ACHIEVEMENT, f"–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ: {ACHIEVEMENTS[ach_id]}!", check_referral=False)
    if profile['total_points'] >= 10: grant_if_new('first_steps')
    if profile['recycle_report_count'] >= 10: grant_if_new('recycler_adept')
    if profile['quiz_correct_streak'] >= 10: grant_if_new('eco_erudite')
    if profile['challenges_completed_count'] >= 3: grant_if_new('marathoner')
    if profile['referrals_count'] >= 1: grant_if_new('mentor')
    if profile['recycle_streak_count'] >= 7: grant_if_new('perfectionist')
    
def extract_entities(text: str) -> Tuple[str | None, str | None, str | None]:
    clean_text = re.sub(r'[^\w\s]', '', text).lower()
    city, material, district = None, None, None
    
    # –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–∏—Å–∫–∞ –≥–æ—Ä–æ–¥–∞ —Å fuzzy matching
    city_map = {'–∫—É—Ä–≥–∞–Ω': ['–∫—É—Ä–≥–∞–Ω', '–∫–≥–Ω']}
    all_city_aliases = [alias for sublist in city_map.values() for alias in sublist]
    
    # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ—Ö–æ–∂–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤ —Ç–µ–∫—Å—Ç–µ
    best_match = process.extractOne(clean_text, all_city_aliases, score_cutoff=80) # –ü–æ—Ä–æ–≥ 80% —Å—Ö–æ–∂–µ—Å—Ç–∏
    
    if best_match:
        matched_alias = best_match[0]
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–Ω–æ–µ –∏–º—è –≥–æ—Ä–æ–¥–∞ –ø–æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º—É –∞–ª–∏–∞—Å—É
        for full_city_name, aliases in city_map.items():
            if matched_alias in aliases:
                city = full_city_name
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–∑–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞, —á—Ç–æ–±—ã –Ω–µ –º–µ—à–∞–ª–∏ –ø–æ–∏—Å–∫—É –º–∞—Ç–µ—Ä–∏–∞–ª–∞
                for alias_to_remove in aliases:
                    clean_text = clean_text.replace(alias_to_remove, '')
                break

    temp_material = clean_text
    for trigger in SEARCH_TRIGGERS: temp_material = temp_material.replace(trigger, '')
    words = temp_material.strip().split()
    while words and words[0] in JUNK_WORDS: words.pop(0)
    while words and words[-1] in JUNK_WORDS: words.pop(-1)
    material = ' '.join(words)
    
    # –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ–±—ã –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å –ø—É—Å—Ç–æ–π –º–∞—Ç–µ—Ä–∏–∞–ª, –µ—Å–ª–∏ –±—ã–ª –Ω–∞–π–¥–µ–Ω —Ç–æ–ª—å–∫–æ –≥–æ—Ä–æ–¥
    if not material.strip():
        material = None
        
    return material, city, district

def find_recycling_points(material: str, city: str) -> Tuple[List[dict], List[str]]:
    if points_df.empty or not material or not city: return [], []
    try:
        synonym_map = {'—à–∏–Ω—ã': ['—à–∏–Ω', '–ø–æ–∫—Ä—ã—à–∫', '–∫–æ–ª–µ—Å'], '—Ñ—É—Ç–±–æ–ª–∫–∏': ['—Ñ—É—Ç–±–æ–ª–∫', '–æ–¥–µ–∂–¥', '–≤–µ—â–∏', '—Ç–µ–∫—Å—Ç–∏–ª—å'],'–±—É—Ç—ã–ª–∫–∏': ['–±—É—Ç—ã–ª–∫', '–ø—ç—Ç', '–ø–ª–∞—Å—Ç–∏–∫'], '–ø–ª–∞—Å—Ç–∏–∫': ['–ø–ª–∞—Å—Ç–∏–∫', '–ø—ç—Ç', '–±—É—Ç—ã–ª–∫', 'hdpe', '–ø–Ω–¥'], '–±–∞—Ç–∞—Ä–µ–π–∫–∏': ['–±–∞—Ç–∞—Ä–µ–π–∫', '–∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä'], '–±—É–º–∞–≥–∞': ['–±—É–º–∞–≥', '–º–∞–∫—É–ª–∞—Ç—É—Ä', '–∫–∞—Ä—Ç–æ–Ω', '–∫–Ω–∏–≥'], '—Å—Ç–µ–∫–ª–æ': ['—Å—Ç–µ–∫–ª', '–±–∞–Ω–∫', '—Å—Ç–µ–∫–ª–æ—Ç–∞—Ä'], '–æ–¥–µ–∂–¥–∞': ['–æ–¥–µ–∂–¥', '–≤–µ—â–∏', '—Ç–µ–∫—Å—Ç–∏–ª—å', '—Ñ—É—Ç–±–æ–ª–∫'], '–º–µ—Ç–∞–ª–ª': ['–º–µ—Ç–∞–ª–ª', '–∂–µ—Å—Ç—è–Ω', '–∞–ª—é–º–∏–Ω', '—á–µ—Ä–º–µ—Ç', '—Ü–≤–µ—Ç–º–µ—Ç'], '–∫—Ä—ã—à–∫–∏': ['–∫—Ä—ã—à–∫'], '—Ç–µ—Ö–Ω–∏–∫–∞': ['—Ç–µ—Ö–Ω–∏–∫', '—ç–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞'], '–æ–ø–∞—Å–Ω—ã–µ –æ—Ç—Ö–æ–¥—ã': ['–æ–ø–∞—Å–Ω—ã–µ –æ—Ç—Ö–æ–¥—ã', '—Ä—Ç—É—Ç—å', '–≥—Ä–∞–¥—É—Å–Ω–∏–∫', '–ª–∞–º–ø–æ—á–∫', '–ª–∞–º–ø–∞'], '–∑—É–±–Ω—ã–µ —â–µ—Ç–∫–∏': ['–∑—É–±–Ω–∞—è —â–µ—Ç–∫–∞', '–∑—É–±–Ω—ã–µ —â–µ—Ç–∫–∏']}
        for key, values in synonym_map.items():
            if any(val in material for val in values): search_terms = values; break
        if not search_terms: search_terms = [material]
        city_points = points_df[points_df['city'].str.lower() == city.lower()]
        valid_points = city_points.dropna(subset=['accepts'])
        pattern = '|'.join(search_terms)
        found_points = valid_points[valid_points['accepts'].str.lower().str.contains(pattern, case=False, na=False)]
        return found_points.to_dict('records'), search_terms
    except Exception as e: print(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: {e}"); return [], []

def format_points_response(points: List[dict], header: str) -> str:
    response_parts = [header]
    for idx, point in enumerate(points, 1):
        name = escape_markdown(str(point.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')))
        address = escape_markdown(str(point.get('address', '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω')))
        
        work_hours_value = str(point.get('work_hours', ''))
        work_hours_text = work_hours_value if work_hours_value else '–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã –Ω–µ —É–∫–∞–∑–∞–Ω–æ'
        work_hours = escape_markdown(work_hours_text)
        
        response_parts.append(f"üìç *{idx}\\. {name}*\n   *–ê–¥—Ä–µ—Å:* {address}\n   *–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:* {work_hours}")
    return "\n\n".join(response_parts)

def get_knowledge_answer(question: str) -> Tuple[str, str | None]:
    clean_question = re.sub(r'[^\w\s]', '', question.lower())
    user_words = set(clean_question.split()) - STOP_WORDS
    if not user_words: return "", None
    best_match_score = 0
    best_answer, best_context = "", None
    for item in knowledge_base:
        kb_clean_question = re.sub(r'[^\w\s]', '', item['question'].lower())
        kb_words = set(kb_clean_question.split()) - STOP_WORDS
        if not kb_words: continue
        score = len(user_words.intersection(kb_words))
        ratio = score / len(kb_words) if len(kb_words) > 0 else 0
        if score >= 2 and ratio > 0.6 and score > best_match_score:
            best_match_score, best_answer = score, item['answer']
            best_context = item.get('context_keyword')
    return (best_answer, best_context) if best_match_score >= 2 else ("", None)
    
def get_user_intent(question: str) -> str:
    if not giga: return "GENERAL"
    system_prompt = ("–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –Ω–∞–º–µ—Ä–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û—Ç–≤–µ—Ç—å –û–î–ù–ò–ú —Å–ª–æ–≤–æ–º. "
                     "1. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ, –∫—É–¥–∞ —á—Ç–æ-—Ç–æ —Å–¥–∞—Ç—å, –∏–ª–∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∞–¥—Ä–µ—Å - –æ—Ç–≤–µ—Ç—å SEARCH. "
                     "2. –ï—Å–ª–∏ –æ–Ω —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –æ —Ç–≤–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö, –ø—Ä–æ—Å–∏—Ç –ø–æ–º–æ—â–∏ ('–ø–æ–º–æ–≥–∏', '—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å') –∏–ª–∏ –∑–¥–æ—Ä–æ–≤–∞–µ—Ç—Å—è - –æ—Ç–≤–µ—Ç—å HELP. "
                     "3. –ï—Å–ª–∏ —Ä–µ—á—å –æ —á–µ–ª–ª–µ–Ω–¥–∂–∞—Ö, –≤—ã–∑–æ–≤–∞—Ö, –∑–∞–¥–∞–Ω–∏—è—Ö - –æ—Ç–≤–µ—Ç—å CHALLENGE. "
                     "4. –í–æ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö (–æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ–± —ç–∫–æ–ª–æ–≥–∏–∏) - –æ—Ç–≤–µ—Ç—å GENERAL.")
    payload = Chat(messages=[Messages(role=MessagesRole.SYSTEM, content=system_prompt), Messages(role=MessagesRole.USER, content=question)], temperature=0.1, model='GigaChat-Max')
    try:
        response = giga.chat(payload)
        intent = response.choices[0].message.content.strip().upper()
        if intent in ["SEARCH", "HELP", "CHALLENGE", "GENERAL"]:
            logging.info(f"Intent for '{question[:30]}...' -> {intent}")
            return intent
        else:
            logging.warning(f"Unexpected intent response: '{intent}'. Defaulting to GENERAL.")
            return "GENERAL"
    except Exception as e:
        logging.error(f"Error in get_user_intent: {e}")
        return "GENERAL"

def get_gigachat_answer(question: str, history: deque) -> str:
    if not giga: return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –º–æ–¥—É–ª—å GigaChat –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω."
    system_prompt = (
        "–¢–≤–æ—è —Ä–æ–ª—å - –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —ç–∫–æ–ª–æ–≥–∏–∏. –¢—ã –ø–æ–º–Ω–∏—à—å –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è "
        "–∏ –º–æ–∂–µ—à—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥. –û—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç–∫–æ–ª–æ–≥–∏–µ–π –∏ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–æ–π. "
        "–ë—É–¥—å –∫—Ä–∞—Ç–∫–∏–º, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º. –û—Ç–≤–µ—á–∞–π —Å—Ç—Ä–æ–≥–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ù–µ –≤–∫–ª—é—á–∞–π –≤ –æ—Ç–≤–µ—Ç –ø—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–ª–∏ —Ç–µ–∫—Å—Ç –Ω–∞ –¥—Ä—É–≥–∏—Ö —è–∑—ã–∫–∞—Ö. "
        "–í–∞–∂–Ω–æ: –ù–µ –ø—Ä–∏–≤–æ–¥–∏ –≤ –ø—Ä–∏–º–µ—Ä –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π, –±—Ä–µ–Ω–¥–æ–≤ –∏–ª–∏ –∏–º–µ–Ω–∞ –ª—é–¥–µ–π, –µ—Å–ª–∏ —Ç–µ–±—è –æ–± —ç—Ç–æ–º –Ω–µ –ø—Ä–æ—Å—è—Ç –Ω–∞–ø—Ä—è–º—É—é. "
        "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –Ω–µ –ø–æ —Ç–µ–º–µ, –≤–µ–∂–ª–∏–≤–æ –æ—Ç–∫–∞–∂–∏: '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –º–æ–≥—É –æ–±—Å—É–∂–¥–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —ç–∫–æ–ª–æ–≥–∏–µ–π.'"
    )
    messages_for_giga = [Messages(role=MessagesRole.SYSTEM, content=system_prompt)]
    for msg in history:
        role = MessagesRole.USER if msg['role'] == 'user' else MessagesRole.ASSISTANT
        messages_for_giga.append(Messages(role=role, content=msg['content']))
    messages_for_giga.append(Messages(role=MessagesRole.USER, content=question))
    payload = Chat(messages=messages_for_giga, temperature=0.7, model='GigaChat-Max')
    try:
        return giga.chat(payload).choices[0].message.content
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ GigaChat: {e}")
        return "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞."

def handle_info_request(text: str) -> str | None:
    text_lower = text.lower()
    for city, point_info in FALLBACK_POINTS.items():
        if point_info['name'].lower() in text_lower:
            if '—Ç–µ–ª–µ—Ñ–æ–Ω' in text_lower or '–Ω–æ–º–µ—Ä' in text_lower: return f"üìû –¢–µ–ª–µ—Ñ–æ–Ω –ø—É–Ω–∫—Ç–∞ '{point_info['name']}': `{escape_markdown(point_info.get('phone', '–Ω–µ —É–∫–∞–∑–∞–Ω'))}`"
            if '—Å–∞–π—Ç' in text_lower: return f"üåê –°–∞–π—Ç –ø—É–Ω–∫—Ç–∞ '{point_info['name']}': {escape_markdown(point_info.get('website', '–Ω–µ —É–∫–∞–∑–∞–Ω'))}"
            if '–∞–¥—Ä–µ—Å' in text_lower: return f"üìç –ê–¥—Ä–µ—Å –ø—É–Ω–∫—Ç–∞ '{point_info['name']}': {escape_markdown(point_info.get('address', '–Ω–µ —É–∫–∞–∑–∞–Ω'))}"
    return None
    
def check_challenges():
    logging.info("–ó–∞–ø—É—â–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ–ª–ª–µ–Ω–¥–∂–µ–π...")
    active_challenges = db.get_all_active_challenges()
    for challenge in active_challenges:
        user_id, challenge_id = challenge['user_id'], challenge['challenge_id']
        start_date = date.fromisoformat(challenge['start_date'])
        challenge_info = challenges.CHALLENGES[challenge_id]
        days_passed = (date.today() - start_date).days
        if days_passed >= challenge_info['duration_days']:
            db.end_challenge(user_id)
            profile = db.get_or_create_user_profile(user_id)
            new_count = profile['challenges_completed_count'] + 1
            db.update_profile_stats(user_id, {'challenges_completed_count': new_count})
            add_points_and_notify(user_id, POINTS_FOR_CHALLENGE, f"–ó–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —á–µ–ª–ª–µ–Ω–¥–∂–∞ ¬´{challenge_info['title']}¬ª", check_referral=True)
            bot.send_message(user_id, challenge_info['end_message'])
            logging.info(f"–ß–µ–ª–ª–µ–Ω–¥–∂ {challenge_id} –∑–∞–≤–µ—Ä—à–µ–Ω –¥–ª—è {user_id}.")
        elif days_passed > 0 and (days_passed + 1) % 2 == 0 : # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ä–∞–∑ –≤ 2 –¥–Ω—è
            bot.send_message(user_id, f"–î–µ–Ω—å {days_passed + 1}: {challenge_info['daily_message']}")
            logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ —á–µ–ª–ª–µ–Ω–¥–∂—É –¥–ª—è {user_id}")

def send_daily_tip():
    logging.info("–ó–∞–ø—É—â–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ —ç–∫–æ-—Å–æ–≤–µ—Ç–æ–≤...")
    subscribers = db.get_all_subscribers()
    if not subscribers or not eco_tips: 
        logging.info("–ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏–ª–∏ —Å–æ–≤–µ—Ç–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
        return
    tip_of_the_day = random.choice(eco_tips)
    message = f"üí° *–≠–∫–æ-—Å–æ–≤–µ—Ç –¥–Ω—è:*\n\n{escape_markdown(tip_of_the_day)}"
    for user_id in subscribers:
        try: bot.send_message(user_id, message, parse_mode='MarkdownV2')
        except Exception as e:
            if 'bot was blocked' in str(e): 
                logging.warning(f"{user_id} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –£–¥–∞–ª—è–µ–º –∏–∑ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤.")
                db.remove_subscriber(user_id)
            else: logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–≤–µ—Ç–∞ {user_id}: {e}")
    logging.info(f"–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–≤–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è {len(subscribers)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")

def show_all_challenges(chat_id, edit_message_id=None):
    markup = types.InlineKeyboardMarkup()
    for c_id, c_info in challenges.CHALLENGES.items():
        markup.add(types.InlineKeyboardButton(c_info['title'], callback_data=f"show_challenge_{c_id}"))
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —á–µ–ª–ª–µ–Ω–¥–∂:"
    try:
        if edit_message_id:
            bot.edit_message_text(text, chat_id, edit_message_id, reply_markup=markup)
        else:
            bot.send_message(chat_id, text, reply_markup=markup)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ show_all_challenges: {e}")

def generate_quiz_data():
    if not giga or not (interesting_facts and eco_tips):
        return None
    all_facts = [fact for fact in (interesting_facts + eco_tips) if len(fact) <= 80]
    if len(all_facts) < 1: return None
    base_fact = random.choice(all_facts)
    prompt = (
        f"–°–æ–∑–¥–∞–π –≤–æ–ø—Ä–æ—Å –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ —Ñ–∞–∫—Ç–∞: '{base_fact}'.\n"
        "–ó–∞—Ç–µ–º –ø—Ä–∏–¥—É–º–∞–π 3 –Ω–µ–≤–µ—Ä–Ω—ã—Ö, –Ω–æ –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å.\n"
        "–í–µ—Ä–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–í–æ–ø—Ä–æ—Å: [–¢–≤–æ–π –≤–æ–ø—Ä–æ—Å –∑–¥–µ—Å—å]\n"
        "–í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: [–ü–µ—Ä–µ—Ñ—Ä–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∞–∫—Ç –∏–ª–∏ –∫—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å]\n"
        "–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç 1: [–¢–≤–æ–π –ø–µ—Ä–≤—ã–π –Ω–µ–≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç]\n"
        "–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç 2: [–¢–≤–æ–π –≤—Ç–æ—Ä–æ–π –Ω–µ–≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç]\n"
        "–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç 3: [–¢–≤–æ–π —Ç—Ä–µ—Ç–∏–π –Ω–µ–≤–µ—Ä–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç]\n"
        "–ö–∞–∂–¥—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞ –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 80 —Å–∏–º–≤–æ–ª–æ–≤."
    )
    payload = Chat(messages=[Messages(role=MessagesRole.USER, content=prompt)], temperature=0.7, model='GigaChat-Max')
    try:
        response_text = giga.chat(payload).choices[0].message.content
        lines = response_text.strip().split('\n')
        quiz_dict = {}
        for line in lines:
            if ':' in line:
                key, value = line.split(':', 1)
                quiz_dict[key.strip()] = value.strip()
        question = quiz_dict.get("–í–æ–ø—Ä–æ—Å")
        correct_answer = quiz_dict.get("–í–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç")
        wrong_answers = [
            quiz_dict.get("–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç 1"),
            quiz_dict.get("–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç 2"),
            quiz_dict.get("–ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç 3")
        ]
        if not all([question, correct_answer] + wrong_answers):
            logging.error("GigaChat returned malformed quiz data.")
            return None
        options = [correct_answer] + wrong_answers
        random.shuffle(options)
        correct_option_id = options.index(correct_answer)
        return {"question": question, "options": options, "correct_option_id": correct_option_id}
    except Exception as e:
        logging.error(f"Failed to generate quiz data with GigaChat: {e}")
        return None

# –í—Å—Ç–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ bot_polling.py

def send_help_message(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞."""
    
    help_text = """
*–ö—Ä–∞—Ç–∫–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≠–∫–æ\\-–ü–æ–º–æ—â–Ω–∏–∫–æ–º* ‚ôªÔ∏è

–ü—Ä–∏–≤–µ—Ç\\! –Ø –≤–∞—à –ª–∏—á–Ω—ã–π –≥–∏–¥ –≤ –º–∏—Ä–µ —ç–∫–æ–ª–æ–≥–∏–∏ –∏ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–∏\\. –ú–æ—è —Ü–µ–ª—å ‚Äî –ø–æ–º–æ—á—å –≤–∞–º —Å–¥–µ–ª–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º–∏\\. –í–º–µ—Å—Ç–µ –º—ã —Å–º–æ–∂–µ–º —Å–¥–µ–ª–∞—Ç—å –Ω–∞—à—É –ø–ª–∞–Ω–µ—Ç—É —á–∏—â–µ\\!

*–ß—Ç–æ —è —É–º–µ—é?*

üìç *–ù–∞—Ö–æ–¥–∏—Ç—å –ø—É–Ω–∫—Ç—ã –ø—Ä–∏–µ–º–∞ –≤—Ç–æ—Ä—Å—ã—Ä—å—è*
–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ, —á—Ç–æ –∏ –≥–¥–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–∞—Ç—å\\. –Ø –ø–æ–π–º—É –¥–∞–∂–µ —Å –æ–ø–µ—á–∞—Ç–∫–∞–º–∏\\!
–ü—Ä–∏–º–µ—Ä—ã:
`–ö—É–¥–∞ —Å–¥–∞—Ç—å –±–∞—Ç–∞—Ä–µ–π–∫–∏?`
`–°—Ç–µ–∫–ª–æ –≤ –ö—É—Ä–≥–∞–Ω–µ`


üß† *–û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ–± —ç–∫–æ–ª–æ–≥–∏–∏*
–°–ø—Ä–∞—à–∏–≤–∞–π—Ç–µ —á—Ç–æ —É–≥–æ–¥–Ω–æ –æ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–µ, —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –∏–ª–∏ —ç–∫–æ–ª–æ–≥–∏—á–Ω–æ–º –æ–±—Ä–∞–∑–µ –∂–∏–∑–Ω–∏\\.
–ü—Ä–∏–º–µ—Ä—ã:
`–ö–∞–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å –ø–ª–∞—Å—Ç–∏–∫ –∫ —Å–¥–∞—á–µ?`
`–ü–æ—á–µ–º—É –Ω–µ–ª—å–∑—è –≤—ã–±—Ä–∞—Å—ã–≤–∞—Ç—å –ª–∞–º–ø–æ—á–∫–∏?`
`–ß—Ç–æ —Ç–∞–∫–æ–µ zero waste?`

üí™ *–ü—Ä–µ–¥–ª–∞–≥–∞—Ç—å –≠–∫–æ\\-–ß–µ–ª–ª–µ–Ω–¥–∂–∏*
–•–æ—Ç–∏—Ç–µ –≤—ã—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–ª–µ–∑–Ω—É—é –ø—Ä–∏–≤—ã—á–∫—É? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É *¬´–≠–∫–æ\\-—á–µ–ª–ª–µ–Ω–¥–∂ üí™¬ª* –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π\\. –ó–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ ‚Äî –æ—Å–æ–±—ã–µ –Ω–∞–≥—Ä–∞–¥—ã\\!

üí° *–î–∞–≤–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–µ —Å–æ–≤–µ—Ç—ã –∏ —Ñ–∞–∫—Ç—ã*
–ù–∞–∂–º–∏—Ç–µ *¬´–°–æ–≤–µ—Ç –¥–Ω—è üí°¬ª*, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —á—Ç–æ\\-—Ç–æ –Ω–æ–≤–æ–µ, –∏–ª–∏ *¬´–≠–∫–æ\\-–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ üß†¬ª*, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –∏ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –æ—á–∫–∏\\!

‚ú® *–í–∞—à–∞ –≠–∫–æ\\-–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: –ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –±–∞–ª–ª—ã?*

–ó–∞ –∫–∞–∂–¥–æ–µ –ø–æ–ª–µ–∑–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ *–≠–∫–æ\\-–û—á–∫–∏*\\. –û–Ω–∏ –ø–æ–≤—ã—à–∞—é—Ç –≤–∞—à —É—Ä–æ–≤–µ–Ω—å, –æ—Ç–∫—Ä—ã–≤–∞—é—Ç –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –ø–æ–º–æ–≥–∞—é—Ç —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç—å—Å—è —Å –¥—Ä—É–≥–∏–º–∏ –≤ *–¢–∞–±–ª–∏—Ü–µ –õ–∏–¥–µ—Ä–æ–≤ üèÜ*\\!

–í–æ—Ç –∑–∞ —á—Ç–æ –Ω–∞—á–∏—Å–ª—è—é—Ç—Å—è –±–∞–ª–ª—ã:
‚Ä¢ *\\+75 –æ—á–∫–æ–≤* ‚Äî –∑–∞ —É—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ *–≠–∫–æ\\-–ß–µ–ª–ª–µ–Ω–¥–∂–∞*\\.
‚Ä¢ *\\+30 –æ—á–∫–æ–≤* ‚Äî –∑–∞ –∫–∞–∂–¥–æ–≥–æ *–ø—Ä–∏–≥–ª–∞—à–µ–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞* \\(–∫–Ω–æ–ø–∫–∞ ¬´–ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ ü§ù¬ª\\)\\.
‚Ä¢ *\\+20 –æ—á–∫–æ–≤* ‚Äî –∑–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ *–¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è*\\.
‚Ä¢ *\\+10 –æ—á–∫–æ–≤* ‚Äî –∑–∞ *–µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç* –æ —Å–¥–∞—á–µ –≤—Ç–æ—Ä—Å—ã—Ä—å—è \\(–∫–Ω–æ–ø–∫–∞ ¬´–Ø —Å–¥–∞–ª –≤—Ç–æ—Ä—Å—ã—Ä—å–µ\\! ‚úÖ¬ª\\)\\.
‚Ä¢ *\\+5 –æ—á–∫–æ–≤* ‚Äî –∑–∞ –∫–∞–∂–¥—ã–π *–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç* –≤ –≠–∫–æ\\-–í–∏–∫—Ç–æ—Ä–∏–Ω–µ\\.
‚Ä¢ *\\+1 –æ—á–∫–æ* ‚Äî –∑–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ *¬´–°–æ–≤–µ—Ç–∞ –¥–Ω—è¬ª*\\.

–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å –≤—Å–µ–≥–¥–∞ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –Ω–∞–∂–∞–≤ –∫–Ω–æ–ø–∫—É *¬´–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å üë§¬ª*\\.

*–ì–æ—Ç–æ–≤—ã –Ω–∞—á–∞—Ç—å? –ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é\\! –í–∞—à –≤–∫–ª–∞–¥ –æ—á–µ–Ω—å –≤–∞–∂–µ–Ω\\!*
"""
    send_message_safely(message, help_text)

# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò TELEGRAM ---
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = message.from_user.id
    args = message.text.split()
    referred_by = None
    
    if len(args) > 1 and args[1].startswith('ref_'):
        try:
            referred_by = int(args[1].replace('ref_', ''))
            if referred_by == user_id: referred_by = None
        except (ValueError, IndexError):
            referred_by = None

    db.get_or_create_user_profile(user_id, referred_by=referred_by)
    if referred_by:
        bot.send_message(referred_by, "üéâ –í–∞—à –¥—Ä—É–≥ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ! –í—ã –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –Ω–∞–±–µ—Ä–µ—Ç 50 –æ—á–∫–æ–≤.")
    
    bot.reply_to(message, "‚ôªÔ∏è *–ü—Ä–∏–≤–µ—Ç\\! –Ø –≤–∞—à —ç–∫–æ\\-–ø–æ–º–æ—â–Ω–∏–∫\\.*\n\n–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ–±–æ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /help –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–ø–æ–º–æ—â—å¬ª\\.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –∑–∞–¥–∞–π—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å\\!", parse_mode='MarkdownV2', reply_markup=create_main_keyboard())

@bot.message_handler(commands=['recycled'])
def handle_recycled(message):
    user_id = message.from_user.id
    profile = db.get_or_create_user_profile(user_id)
    today = date.today()
    today_str = today.isoformat()

    if profile.get('last_recycle_report_date') == today_str:
        bot.reply_to(message, "–í—ã —É–∂–µ —Å–æ–æ–±—â–∞–ª–∏ –æ —Å–¥–∞—á–µ –≤—Ç–æ—Ä—Å—ã—Ä—å—è —Å–µ–≥–æ–¥–Ω—è. –°–ø–∞—Å–∏–±–æ! üòâ")
        return

    yesterday_str = (today - timedelta(days=1)).isoformat()
    current_streak = profile['recycle_streak_count']
    current_streak = current_streak + 1 if profile.get('last_recycle_report_date') == yesterday_str else 1
    
    db.update_profile_stats(user_id, {
        'recycle_report_count': profile['recycle_report_count'] + 1,
        'last_recycle_report_date': today_str,
        'recycle_streak_count': current_streak
    })
    
    add_points_and_notify(user_id, POINTS_FOR_RECYCLE, "–ó–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –æ—Ç—á–µ—Ç –æ —Å–¥–∞—á–µ –≤—Ç–æ—Ä—Å—ã—Ä—å—è", check_referral=True)
    
    if current_streak >= 5 and current_streak % 7 == 5:
         add_points_and_notify(user_id, POINTS_FOR_STREAK, f"–ó–∞ {current_streak}-–¥–Ω–µ–≤–Ω—É—é —Å–µ—Ä–∏—é —Å–¥–∞—á–∏ –≤—Ç–æ—Ä—Å—ã—Ä—å—è!", check_referral=True)

@bot.message_handler(commands=['profile'])
def handle_profile(message):
    user_id = message.from_user.id
    profile = db.get_or_create_user_profile(user_id)
    achievements = db.get_user_achievements(user_id)
    
    level_num = profile.get('level', 1)
    level_info = LEVELS[level_num]
    
    points_needed_str = "–ú–ê–ö–°–ò–ú–£–ú"
    next_level_num = level_num + 1
    if next_level_num in LEVELS:
        points_needed = LEVELS[next_level_num]['min_points'] - profile['total_points']
        points_needed_str = str(points_needed) if points_needed > 0 else "0"

    response_parts = [
        f"üë§ *–í–∞—à –≠–∫–æ\\-–ü—Ä–æ—Ñ–∏–ª—å*",
        f"üèÜ *–£—Ä–æ–≤–µ–Ω—å:* {level_num} \\- *{escape_markdown(level_info['name'])}*",
        f"‚ú® *–í—Å–µ–≥–æ –æ—á–∫–æ–≤:* {profile['total_points']}",
        f"üåø *–û—á–∫–∏ –≤ —ç—Ç–æ–º –∫–≤–∞—Ä—Ç–∞–ª–µ:* {profile['quarterly_points']}",
        f"üéØ *–î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–≤–Ω—è:* {points_needed_str} –æ—á–∫–æ–≤"
    ]

    if achievements:
        response_parts.append("\nüèÖ *–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:*")
        for ach_id in achievements:
            response_parts.append(f"\\- {escape_markdown(ACHIEVEMENTS.get(ach_id, ach_id))}")

    send_message_safely(message, "\n".join(response_parts))

@bot.message_handler(commands=['leaderboard'])
def handle_leaderboard(message):
    leaders = db.get_leaderboard()
    if not leaders:
        send_message_safely(message, "–ü–æ–∫–∞ —á—Ç–æ —É –Ω–∞—Å –Ω–µ—Ç –ª–∏–¥–µ—Ä–æ–≤ –≤ —ç—Ç–æ–º –∫–≤–∞—Ä—Ç–∞–ª–µ. –°—Ç–∞–Ω—å—Ç–µ –ø–µ—Ä–≤—ã–º!")
        return

    response_parts = ["üèÜ *–¢–∞–±–ª–∏—Ü–∞ –õ–∏–¥–µ—Ä–æ–≤ (—Ç–µ–∫—É—â–∏–π –∫–≤–∞—Ä—Ç–∞–ª)* üèÜ\n"]
    medals = ["ü•á", "ü•à", "ü•â", "4Ô∏è‚É£", "5Ô∏è‚É£"]
    
    for i, leader in enumerate(leaders):
        try:
            user_info = bot.get_chat(leader['user_id'])
            user_name = user_info.first_name or user_info.username or f"–ì–µ—Ä–æ–π"
        except Exception: user_name = f"–ì–µ—Ä–æ–π"
        response_parts.append(f"{medals[i]} *{escape_markdown(user_name)}* \\- {leader['quarterly_points']} –æ—á–∫–æ–≤")

    send_message_safely(message, "\n".join(response_parts))

@bot.message_handler(commands=['help'])
def handle_help_command(message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /help –∏ –≤—ã–∑—ã–≤–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π."""
    send_help_message(message)

@bot.message_handler(commands=['quiz'])
def handle_quiz(message):
    user_id = message.from_user.id
    profile = db.get_or_create_user_profile(user_id)
    today_str = date.today().isoformat()

    if profile.get('last_quiz_date') == today_str:
        bot.reply_to(message, "–í—ã —É–∂–µ –æ—Ç–≤–µ—á–∞–ª–∏ –Ω–∞ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É —Å–µ–≥–æ–¥–Ω—è. –ù–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç –∑–∞–≤—Ç—Ä–∞!")
        return
        
    db.update_profile_stats(user_id, {'last_quiz_date': today_str})
    
    bot.send_message(message.chat.id, "üß† –ì–µ–Ω–µ—Ä–∏—Ä—É—é –¥–ª—è –≤–∞—Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ.")
    quiz_data = generate_quiz_data()
    
    if not quiz_data:
        bot.reply_to(message, "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –¥–ª—è –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–∑–∂–µ.")
        db.update_profile_stats(user_id, {'last_quiz_date': None})
        return

    poll_message = bot.send_poll(
        chat_id=message.chat.id,
        question=quiz_data["question"],
        options=quiz_data["options"],
        type='quiz',
        correct_option_id=quiz_data["correct_option_id"],
        is_anonymous=False
    )
    
    bot.current_polls[poll_message.poll.id] = quiz_data["correct_option_id"]

@bot.poll_answer_handler()
def handle_poll_answer(poll_answer):
    user_id = poll_answer.user.id
    
    correct_option_id = bot.current_polls.pop(poll_answer.poll_id, None)
    
    if correct_option_id is None:
        logging.warning(f"Poll with ID {poll_answer.poll_id} not found in memory.")
        return

    profile = db.get_or_create_user_profile(user_id)
    
    if correct_option_id == poll_answer.option_ids[0]:
        new_streak = profile['quiz_correct_streak'] + 1
        db.update_profile_stats(user_id, {'quiz_correct_streak': new_streak})
        add_points_and_notify(user_id, POINTS_FOR_QUIZ, "–ó–∞ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω–µ", check_referral=True)
    else:
        db.update_profile_stats(user_id, {'quiz_correct_streak': 0})
        bot.send_message(user_id, "–í —ç—Ç–æ—Ç —Ä–∞–∑ –Ω–µ–≤–µ—Ä–Ω–æ, –Ω–æ –Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–π—Ç–µ! –í —Å–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–ª—É—á–∏—Ç—Å—è. üëç")

@bot.message_handler(commands=['invite'])
def handle_invite(message):
    user_id = message.from_user.id
    bot_info = bot.get_me()
    bot_username = bot_info.username
    invite_link = f"https://t.me/{bot_username}?start=ref_{user_id}"
    
    response = (f"ü§ù *–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å\\!* \n\n"
                f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ–º—É –¥—Ä—É–≥—É —ç—Ç—É —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É\\. –ö–æ–≥–¥–∞ –æ–Ω –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—Å—è –∏ –Ω–∞–±–µ—Ä–µ—Ç —Å–≤–æ–∏ –ø–µ—Ä–≤—ã–µ 50 –æ—á–∫–æ–≤, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ *{POINTS_FOR_INVITE} –≠–∫–æ-–û—á–∫–æ–≤*\\!\n\n"
                f"–í–∞—à–∞ —Å—Å—ã–ª–∫–∞:\n`{invite_link}`")
    
    bot.send_message(user_id, response, parse_mode='Markdown')

@bot.message_handler(func=lambda message: True)
def handle_text(message):
    try:
        # --- 1. –ù–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ ---
        user_id = message.from_user.id
        text = message.text.strip()
        text_lower = text.lower()
        db.get_or_create_user_profile(user_id)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        HELP_TRIGGERS = {'–ø–æ–º–æ—â—å', '–ø–æ–º–æ–≥–∏', '–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è', '—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å', '—Ö–µ–ª–ø', '—Å–ø—Ä–∞–≤–∫–∞'}
        if text_lower in HELP_TRIGGERS:
            send_help_message(message)
            return # –ó–∞–≤–µ—Ä—à–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –∏–¥—Ç–∏ –¥–∞–ª—å—à–µ

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è –¥–∏–∞–ª–æ–≥–∞
        if user_id not in user_context:
            user_context[user_id] = {'history': deque(maxlen=MAX_HISTORY_LENGTH)}

        # --- 2. –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ—á–Ω—ã—Ö –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é ---
        button_handlers = {
            BTN_RECYCLED.lower(): handle_recycled,
            BTN_PROFILE.lower(): handle_profile,
            BTN_LEADERBOARD.lower(): handle_leaderboard,
            BTN_QUIZ.lower(): handle_quiz,
            BTN_INVITE.lower(): handle_invite
        }
        if text_lower in button_handlers:
            button_handlers[text_lower](message)
            return

        # --- 3.  –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —è–≤–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ ---
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –º–∞—Ç–µ—Ä–∏–∞–ª –∏ –≥–æ—Ä–æ–¥. –ï—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, —ç—Ç–æ —Ç–æ—á–Ω–æ –ø–æ–∏—Å–∫.
        potential_material, potential_city, potential_district = extract_entities(text_lower)
        
        if potential_city and potential_material:
            logging.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø—Ä—è–º–æ–π –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: –ì–æ—Ä–æ–¥={potential_city}, –ú–∞—Ç–µ—Ä–∏–∞–ª={potential_material}")
            
            bot.send_chat_action(message.chat.id, 'typing')
            all_city_points, search_terms = find_recycling_points(potential_material, potential_city)

            if not all_city_points:
                fallback_point = FALLBACK_POINTS.get(potential_city.lower())
                if fallback_point:
                    city_in_case = "–ö—É—Ä–≥–∞–Ω–µ"
                    response = (f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤.\n\n"
                             f"–ù–æ –≤ –≥–æ—Ä–æ–¥–µ –ö—É—Ä–≥–∞–Ω–µ –µ—Å—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:\n\n"
                             f"üìç {escape_markdown(fallback_point['name'])}\n"
                             f"   –ê–¥—Ä–µ—Å: {fallback_point['address']}\n"  # <-- –£–±—Ä–∞–ª–∏ escape_markdown
                             f"   –¢–µ–ª–µ—Ñ–æ–Ω: {fallback_point.get('phone', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n\n"
                             f"‚ö†Ô∏è –í–∞–∂–Ω–æ: {fallback_point['note']}") # <-- –£–±—Ä–∞–ª–∏ escape_markdown
                else:
                    # –≠—Ç–∞ —á–∞—Å—Ç—å —Å—Ä–∞–±–æ—Ç–∞–µ—Ç, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ config.py –≤–æ–æ–±—â–µ –Ω–µ—Ç –∑–∞–ø–∏—Å–∏ –¥–ª—è —ç—Ç–æ–≥–æ –≥–æ—Ä–æ–¥–∞.
                    response = f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª –ø—É–Ω–∫—Ç–æ–≤ –ø—Ä–∏–µ–º–∞ –¥–ª—è *'{escape_markdown(potential_material)}'* –≤ –≥–æ—Ä–æ–¥–µ *{escape_markdown(potential_city.capitalize())}*\\."
                send_message_safely(message, response)
            else:
                if potential_district:
                    points_in_district = [p for p in all_city_points if potential_district in p.get('address', '').lower()]
                    if points_in_district:
                        all_city_points = points_in_district

                unique_points_by_name = {f"{p.get('name', '')}:{p.get('address', '')}".lower(): p for p in all_city_points}
                unique_points_list = list(unique_points_by_name.values())

                user_context[user_id].update({'found_points': unique_points_list, 'page': 0, 'city': potential_city, 'district': potential_district})
                points_to_show = unique_points_list[:MAX_POINTS_TO_SHOW]
                header = f"‚úÖ *–í–æ—Ç —á—Ç–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤ –≥–æ—Ä–æ–¥–µ {escape_markdown(potential_city.capitalize())}:*"
                if potential_district and any(potential_district in p.get('address', '').lower() for p in points_to_show):
                     header = f"‚úÖ *–í–æ—Ç —á—Ç–æ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤ —Ä–∞–π–æ–Ω–µ {escape_markdown(potential_district.capitalize())}:*"

                response = format_points_response(points_to_show, header)
                markup = types.InlineKeyboardMarkup()
                if len(unique_points_list) > MAX_POINTS_TO_SHOW:
                    markup.add(types.InlineKeyboardButton("üîÑ –ü–æ–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã", callback_data=f"more_points_{random.randint(1,1000)}"))
                send_message_safely(message, response, reply_markup=markup)

            return

        # --- 4. –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –∏ –∫–æ–º–∞–Ω–¥-—Ç—Ä–∏–≥–≥–µ—Ä–æ–≤ ---
        if text_lower == BTN_CHALLENGE.lower():
            current_challenge = db.get_user_challenge(user_id)
            if current_challenge:
                challenge_info = challenges.CHALLENGES[current_challenge['challenge_id']]
                start_date = date.fromisoformat(current_challenge['start_date'])
                days_passed = (date.today() - start_date).days
                response = (f"–í—ã —É–∂–µ —É—á–∞—Å—Ç–≤—É–µ—Ç–µ –≤ —á–µ–ª–ª–µ–Ω–¥–∂–µ:\n\n*{challenge_info['title']}*\n–î–µ–Ω—å {days_passed + 1} –∏–∑ {challenge_info['duration_days']}.\n\n–•–æ—Ç–∏—Ç–µ –æ—Ç–∫–∞–∑–∞—Ç—å—Å—è –∏ –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–π?")
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –∏ –≤—ã–±—Ä–∞—Ç—å –Ω–æ–≤—ã–π", callback_data="show_all_challenges"), types.InlineKeyboardButton("–ù–µ—Ç, —è –ø—Ä–æ–¥–æ–ª–∂–∞—é!", callback_data="cancel_action"))
                bot.send_message(message.chat.id, response, parse_mode='Markdown', reply_markup=markup)
            else:
                show_all_challenges(message.chat.id)
            return

        if text_lower == BTN_TIP.lower():
            tip_of_the_day = random.choice(eco_tips) if eco_tips else "–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –º–µ–Ω—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Å–æ–≤–µ—Ç—ã."
            response = f"üí° *–°–ª—É—á–∞–π–Ω—ã–π —Å–æ–≤–µ—Ç:*\n\n{escape_markdown(tip_of_the_day)}"
            profile = db.get_or_create_user_profile(user_id)
            today_str = date.today().isoformat()
            if profile.get('last_tip_date') != today_str:
                db.update_profile_stats(user_id, {'last_tip_date': today_str})
                add_points_and_notify(user_id, POINTS_FOR_TIP, "–ó–∞ –ø—Ä–æ—è–≤–ª–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–µ—Å –∫ —ç–∫–æ–ª–æ–≥–∏–∏", check_referral=True)
            send_message_safely(message, response)
            return

        if text_lower.startswith(BTN_FIND_POINT.split()[0].lower()):
            bot.reply_to(message, "–ö–∞–∫–æ–π –≤–∏–¥ –≤—Ç–æ—Ä—Å—ã—Ä—å—è –∏ –≤ –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Å–¥–∞—Ç—å?\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: *–ë–∞—Ç–∞—Ä–µ–π–∫–∏ –≤ –ö—É—Ä–≥–∞–Ω–µ*", parse_mode='Markdown')
            return
        
        if text_lower.startswith(BTN_QUESTION.split()[0].lower()):
            bot.reply_to(message, "–°–ª—É—à–∞—é –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ –ø–µ—Ä–µ—Ä–∞–±–æ—Ç–∫–µ –æ—Ç—Ö–æ–¥–æ–≤!")
            return

        # --- 5. –ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π ---
        answer, context_to_save = get_knowledge_answer(text_lower)
        if answer:
            response, markup = escape_markdown(answer), None
            if context_to_save:
                user_context[user_id]['last_material'] = context_to_save
                markup = types.InlineKeyboardMarkup()
                markup.add(types.InlineKeyboardButton(f"–ù–∞–π—Ç–∏ –ø—É–Ω–∫—Ç—ã –¥–ª—è '{context_to_save}'", callback_data=f"search_context_{context_to_save}"))
            
            send_message_safely(message, response, reply_markup=markup)
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞
            user_context[user_id]['history'].append({'role': 'user', 'content': text})
            user_context[user_id]['history'].append({'role': 'assistant', 'content': answer})
            return

        # --- 6. –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ - –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ GigaChat (Fallback) ---
        bot.send_chat_action(message.chat.id, 'typing')

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–º–µ—Ä–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —à–∞–≥–∏ –Ω–µ –¥–∞–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        intent = get_user_intent(text_lower)
        response = ""

        if intent == "SEARCH":
            material, city, district = extract_entities(text_lower)
            if not city:
                city = "–∫—É—Ä–≥–∞–Ω"
                logging.info(f"–ì–æ—Ä–æ–¥ –Ω–µ —É–∫–∞–∑–∞–Ω, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è '–∫—É—Ä–≥–∞–Ω' –¥–ª—è –º–∞—Ç–µ—Ä–∏–∞–ª–∞: {material}")

            all_city_points, search_terms = find_recycling_points(material, city)
            if not all_city_points:
                
                fallback_point = FALLBACK_POINTS.get(city.lower())
                if fallback_point:
                    response = (f"üòî –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ –Ω–∞—à–µ–ª —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø—É–Ω–∫—Ç–æ–≤.\n\n"
                                f"–ù–æ –≤ –≥–æ—Ä–æ–¥–µ {escape_markdown(city.capitalize())} –µ—Å—Ç—å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:\n\n"
                                f"üìç *{escape_markdown(fallback_point['name'])}*\n"
                                f"   *–ê–¥—Ä–µ—Å:* {escape_markdown(fallback_point['address'])}\n"
                                f"   *–¢–µ–ª–µ—Ñ–æ–Ω:* `{fallback_point.get('phone', '–Ω–µ —É–∫–∞–∑–∞–Ω')}`\n\n"
                                f"‚ö†Ô∏è *–í–∞–∂–Ω–æ:* {escape_markdown(fallback_point['note'])}")
                    
                else:
                    response = f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø—É–Ω–∫—Ç–æ–≤ –¥–ª—è '{escape_markdown(material)}' –Ω–µ –Ω–∞—à–ª–æ—Å—å."
                
                send_message_safely(message, response) # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–¥–µ—Å—å
                return # –ò –∑–∞–≤–µ—Ä—à–∞–µ–º
            else:
                # ... (–ª–æ–≥–∏–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏, –µ—Å–ª–∏ —Ç–æ—á–∫–∏ –Ω–∞–π–¥–µ–Ω—ã, –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
                unique_points_by_name = {f"{p.get('name', '')}:{p.get('address', '')}".lower(): p for p in all_city_points}
                unique_points_list = list(unique_points_by_name.values())
                user_context[user_id].update({'found_points': unique_points_list, 'page': 0, 'city': city, 'district': district})
                points_to_show = unique_points_list[:MAX_POINTS_TO_SHOW]
                header = f"‚úÖ –ù–∞—à–µ–ª –ø—É–Ω–∫—Ç—ã –≤ –≥–æ—Ä–æ–¥–µ *{escape_markdown(city.capitalize())}*:"
                response = format_points_response(points_to_show, header)
                markup = types.InlineKeyboardMarkup()
                if len(unique_points_list) > MAX_POINTS_TO_SHOW:
                    markup.add(types.InlineKeyboardButton("üîÑ –ü–æ–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã", callback_data=f"more_points_{random.randint(1,1000)}"))
                send_message_safely(message, response, reply_markup=markup)
                return # –ó–∞–≤–µ—Ä—à–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ –æ—Ç–≤–µ—Ç —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
            
        elif intent == "HELP":
            send_help_message(message)
            return # –ó–∞–≤–µ—Ä—à–∞–µ–º, —Ç–∞–∫ –∫–∞–∫ –æ—Ç–≤–µ—Ç —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
        
        elif intent == "CHALLENGE":
            show_all_challenges(user_id)
            return
        else: # GENERAL
            if len(text.split()) <= 2 and text_lower in VAGUE_REPLIES:
                response = "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∂–µ—Ç—Å—è, —Ç–≤–æ–π –æ—Ç–≤–µ—Ç –Ω–µ–ø–æ–ª–Ω—ã–π. –ó–∞–¥–∞–π, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é."
            else:
                history = user_context[user_id].get('history', deque(maxlen=MAX_HISTORY_LENGTH))
                response_giga = get_gigachat_answer(text, history)
                response = escape_markdown(response_giga)

        # --- 7. –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ ---
        if response:
             clean_response_for_history = re.sub(r'\\([_*\[\]()~`>#+\-={}.!])', r'\1', response)
             user_context[user_id]['history'].append({'role': 'user', 'content': text})
             user_context[user_id]['history'].append({'role': 'assistant', 'content': clean_response_for_history})
             send_message_safely(message, response)

    except Exception as e:
        logging.critical(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ handle_text: {e}", exc_info=True)
        bot.reply_to(message, "–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫... –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –º–µ–Ω—é.")

@bot.callback_query_handler(func=lambda call: True)
def handle_callbacks(call):
    user_id = call.from_user.id
    data = call.data
    try:
        if data.startswith('more_points_'):
            # ... (–ª–æ–≥–∏–∫–∞ more_points_) ...
            if user_id not in user_context or 'found_points' not in user_context[user_id]:
                bot.answer_callback_query(call.id, text="–î–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏. –°–¥–µ–ª–∞–π—Ç–µ –Ω–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.")
                bot.edit_message_text("–î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ —É—Å—Ç–∞—Ä–µ–ª–∏.", call.message.chat.id, call.message.message_id)
                return
            context = user_context[user_id]
            all_points = context['found_points']
            current_page = context.get('page', 0)
            city = context['city']
            district = context.get('district')

            new_page = current_page + 1
            start_index = new_page * MAX_POINTS_TO_SHOW
            if start_index >= len(all_points):
                new_page, start_index = 0, 0
                bot.answer_callback_query(call.id, text="–≠—Ç–æ –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã. –ü–æ–∫–∞–∑—ã–≤–∞—é —Å –Ω–∞—á–∞–ª–∞.")
            else:
                bot.answer_callback_query(call.id)

            context['page'] = new_page
            points_to_show = all_points[start_index : start_index + MAX_POINTS_TO_SHOW]
            
            header = f"‚úÖ –ù–∞—à–µ–ª –ø—É–Ω–∫—Ç—ã –≤ –≥–æ—Ä–æ–¥–µ *{escape_markdown(city.capitalize())}*:"
            if district and any(district in p.get('address', '').lower() for p in points_to_show):
                header = f"‚úÖ –ù–∞—à–µ–ª –ø—É–Ω–∫—Ç—ã –≤ —Ä–∞–π–æ–Ω–µ *{escape_markdown(district.capitalize())}*:"
            
            response = format_points_response(points_to_show, header)
            
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("üîÑ –ü–æ–∫–∞–∑–∞—Ç—å –¥—Ä—É–≥–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã", callback_data=f"more_points_{random.randint(1,1000)}"))
            bot.edit_message_text(response, call.message.chat.id, call.message.message_id, parse_mode='MarkdownV2', reply_markup=markup)

        elif data in ['subscribe_tip', 'unsubscribe_tip']:
            # ... (–ª–æ–≥–∏–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏) ...
            if data == 'subscribe_tip':
                db.add_subscriber(user_id)
                bot.answer_callback_query(call.id, text="–û—Ç–ª–∏—á–Ω–æ! –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É.")
                bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)
            else: # unsubscribe_tip
                db.remove_subscriber(user_id)
                bot.answer_callback_query(call.id, text="–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.")
                bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, reply_markup=None)

        elif data.startswith('show_challenge_'):
            # ... (–ª–æ–≥–∏–∫–∞ —á–µ–ª–ª–µ–Ω–¥–∂–µ–π) ...
            challenge_id = data.replace('show_challenge_', '')
            info = challenges.CHALLENGES[challenge_id]
            response = f"*{info['title']}*\n\n{info['description']}\n\n–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {info['duration_days']} –¥–Ω–µ–π. –ü—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤?"
            markup = types.InlineKeyboardMarkup()
            markup.add(types.InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å!", callback_data=f"accept_challenge_{challenge_id}"), types.InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="show_all_challenges"))
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=response, parse_mode='Markdown', reply_markup=markup)
        elif data.startswith('accept_challenge_'):
            challenge_id = data.replace('accept_challenge_', '')
            db.start_challenge(user_id, challenge_id)
            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text=challenges.CHALLENGES[challenge_id]['start_message'])
        elif data == 'show_all_challenges':
            show_all_challenges(call.message.chat.id, edit_message_id=call.message.message_id)
        
        elif data == 'cancel_action':
            bot.delete_message(call.message.chat.id, call.message.message_id)
            bot.send_message(call.message.chat.id, "–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º! üí™")
            
        elif data.startswith('search_context_'):
            material = data.replace('search_context_', '')
            bot.answer_callback_query(call.id, f"–ò—â—É –ø—É–Ω–∫—Ç—ã –¥–ª—è '{material}'...")
            bot.send_message(call.message.chat.id, f"–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ –Ω–∞–π—Ç–∏ –ø—É–Ω–∫—Ç—ã –¥–ª—è *{escape_markdown(material)}*?", parse_mode='MarkdownV2')
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ callback_query_handler: {e}", exc_info=True)

# --- –ó–ê–ü–£–°–ö –ë–û–¢–ê ---
if __name__ == "__main__":
    logging.info("–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    points_df, knowledge_base, interesting_facts, eco_tips = load_data()
    
    scheduler = BackgroundScheduler(timezone="Europe/Moscow")
    scheduler.add_job(check_challenges, 'cron', hour=10)
    scheduler.add_job(send_daily_tip, 'cron', hour=11)
    scheduler.start()
    logging.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω.")
    
    logging.info("–ë–æ—Ç (–≤ —Ä–µ–∂–∏–º–µ polling) –∑–∞–ø—É—â–µ–Ω...")
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        logging.critical(f"–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –∏–∑-–∑–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏: {e}")
        scheduler.shutdown()